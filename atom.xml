<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zero的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://luojiamingl.github.io/"/>
  <updated>2018-03-12T02:30:43.716Z</updated>
  <id>http://luojiamingl.github.io/</id>
  
  <author>
    <name>Zero</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>grep统计某个单词的个数，行数等</title>
    <link href="http://luojiamingl.github.io/2018/03/12/grep%E7%BB%9F%E8%AE%A1%E6%9F%90%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E4%B8%AA%E6%95%B0%EF%BC%8C%E8%A1%8C%E6%95%B0%E7%AD%89/"/>
    <id>http://luojiamingl.github.io/2018/03/12/grep统计某个单词的个数，行数等/</id>
    <published>2018-03-12T03:59:22.000Z</published>
    <updated>2018-03-12T02:30:43.716Z</updated>
    
    <content type="html"><![CDATA[<p>文件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">j@j:~$ cat hello.c</div><div class="line">#include&lt;stdio.h&gt;</div><div class="line">//include include</div><div class="line">int main()&#123;</div><div class="line">  printf(&quot;hello world/n&quot;);</div><div class="line">  exit(0);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>grep命令查看include关键词</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">j@j:~$ grep -o include  hello.c</div><div class="line">include</div><div class="line">include</div><div class="line">include</div></pre></td></tr></table></figure><p>如上所示， 所有的include都显示出来了， 包括有两个include的行。</p><p>命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep -c -o include  hello.c</div></pre></td></tr></table></figure></p><p>的结果是2， -c参数只能统计行。如果要统计个数， 可以再来个重定向：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep -o include hello.c| grep -c include</div></pre></td></tr></table></figure><p>得到include的个数 3</p><p>有问题可以联系博主，博客主页有邮箱，微博，文章底部有微信公众号等联系方式。</p><p>转载请注明出处，谢谢！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;文件内容&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=
      
    
    </summary>
    
      <category term="linux" scheme="http://luojiamingl.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="http://luojiamingl.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>使用meerkat进行服务监控和服务降级</title>
    <link href="http://luojiamingl.github.io/2018/01/29/%E4%BD%BF%E7%94%A8meerkat%E8%BF%9B%E8%A1%8C%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7%E5%92%8C%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7/"/>
    <id>http://luojiamingl.github.io/2018/01/29/使用meerkat进行服务监控和服务降级/</id>
    <published>2018-01-29T03:59:22.000Z</published>
    <updated>2018-01-29T07:18:16.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="meerkat进行服务监控和服务降级"><a href="#meerkat进行服务监控和服务降级" class="headerlink" title="meerkat进行服务监控和服务降级"></a>meerkat进行服务监控和服务降级</h1><p>meerkat 是用于服务监控以及服务降级基础组件，主要为了解决调用外部接口的时候进行成功率，响应时间，QPS指标的监控，同时在成功率下降到预设的阈值以下的时候自动切断外部接口的调用，外部接口成功率恢复后自动恢复请求。本文将对使用方式以及进阶特性进行介绍。</p><p>项目主页： <a href="https://github.com/ChanningBJ" target="_blank" rel="external">https://github.com/ChanningBJ</a>…</p><h2 id="为什么要进行监控和熔断"><a href="#为什么要进行监控和熔断" class="headerlink" title="为什么要进行监控和熔断"></a>为什么要进行监控和熔断</h2><p>在我们的Java服务中，经常会调用外部的一些接口进行数据的获取操作，当这些外部接口的成功率比较低的时候会直接影响到服务本身的成功率，因此我们添加了对外部接口调用的成功率和响应时间监控，这样可以在造成大量用户影响之前预先发现并解决问题。同时，对于接口中的非关键数据，我们采取了更具成功率判断进行触发熔断的方式，当成功率下降到预定的阀值以下的时候自动停止对这个外部接口的访问以便保证关键数据能够正常提供，当成功率恢复以后自动恢复请求。</p><h2 id="meerkat主要功能"><a href="#meerkat主要功能" class="headerlink" title="meerkat主要功能"></a>meerkat主要功能</h2><p>监控：监控Java内部操作的成功率以及响应时间指标<br>上报：log文件和Grafhite两种监控指标上报方式，支持扩展其他的上报方式<br>熔断：（可选功能）成功率下降到预设的阈值以下触发熔断保护，暂定对外部接口的访问，成功率恢复以后自动恢复访问</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;com.github.channingbj&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;meerkat&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.2&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure><h3 id="定义受监控的操作"><a href="#定义受监控的操作" class="headerlink" title="定义受监控的操作"></a>定义受监控的操作</h3><p>假设我们的服务中需要从HTTP接口查询一个节目的播放次数，为了防止这个HTTP接口大量超时影响我们自身服务的质量，可以定义一个查询Command：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class GetPlayCountCommand extends FusingCommand&lt;Long&gt; &#123;</div><div class="line"></div><div class="line">    private final Long videoID;</div><div class="line"></div><div class="line">    public GetPlayCountCommand(Long videoID) &#123;</div><div class="line">        this.videoID = videoID;</div><div class="line">    &#125;</div><div class="line">        </div><div class="line">    protected Optional&lt;Long&gt; run() &#123;</div><div class="line">        Long result = 0l;</div><div class="line">        // 调用HTTP接口获取视频的播放次数信息</div><div class="line">        // 如果调用失败，返回 null 或者抛出异常，会将这次操作记录为失败</div><div class="line">        // 如果ID非法，返回 Optional.absent(),会将这次操作记录为成功</div><div class="line">        return Optional.fromNullable(result);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">执行查询：</div><div class="line"></div><div class="line">//获取视频ID为123的视频的播放次数</div><div class="line">GetPlayCountCommand command = new GetPlayCountCommand(123l);</div><div class="line">Long result = command.execute(); // 执行查询操作，如果执行失败或者处于熔断状态，返回 null</div></pre></td></tr></table></figure></p><h2 id="配置监控上报"><a href="#配置监控上报" class="headerlink" title="配置监控上报"></a>配置监控上报</h2><p>在服务初始化的时候需要对监控上报进行设置。下面的例子中开启了监控数据向日志文件的打印<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MeterCenter.INSTANCE</div><div class="line">    .enableReporter(new EnablingLogReporter(&quot;org.apache.log4j.RollingFileAppender&quot;))</div><div class="line">    .init();</div></pre></td></tr></table></figure></p><h2 id="查看统计结果"><a href="#查看统计结果" class="headerlink" title="查看统计结果"></a>查看统计结果</h2><p>统计结果会以熔断命令类名为进行分组。例如前面我们定义的 GetPlayCountCommand 类,package name 是 com.test，那么在日志中的输出将会是这个样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">type=GAUGE, name=com.test.GetPlayCountCommand.normal-rate, value=0.0</div><div class="line">type=GAUGE, name=com.test.GetPlayCountCommand.success-rate, value=61.0</div><div class="line">type=TIMER, name=com.test.GetPlayCountCommand.time, count=25866500, min=0.0, max=0.001, mean=3.963926781047921E-5, stddev=1.951102156677818E-4, median=0.0, p75=0.0, p95=0.0, p98=0.001, p99=0.001, p999=0.001, mean_rate=649806.0831335272, m1=1665370.7316699813, m5=2315813.300713087, m15=2446572.324069477, rate_unit=events/second, duration_unit=milliseconds</div></pre></td></tr></table></figure><h2 id="单独使用监控功能"><a href="#单独使用监控功能" class="headerlink" title="单独使用监控功能"></a>单独使用监控功能</h2><p>如果不想使用熔断功能，只是想监控Java方法调用的耗时和成功率，可以直接使用 OperationMeter 进行实现，只需要在函数调用的前后添加开始和结束的调用即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//创建一个操作的计数器</div><div class="line">    OperationMeter meter = MeterCenter.INSTANCE.getOrCreateMeter(OperationMeterTest.class, OperationMeter.class);</div><div class="line"></div><div class="line">    //模拟成功率60%</div><div class="line">    for(int k=0; k&lt;100; k++)&#123;</div><div class="line">        Timer.Context context = meter.startOperation();</div><div class="line">        if(k%10&lt;6)&#123;</div><div class="line">            meter.endOperation(context, OperationMeter.Result.SUCCESS);</div><div class="line">        &#125; else &#123;</div><div class="line">            meter.endOperation(context, OperationMeter.Result.FAILURE);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><h2 id="开启熔断并配置阀值和持续时间"><a href="#开启熔断并配置阀值和持续时间" class="headerlink" title="开启熔断并配置阀值和持续时间"></a>开启熔断并配置阀值和持续时间</h2><p>首先创建一个接口，继承自FusingConfig，用于指定配置文件的加载路径，同时还可以设定配置文件的刷新时间，具体定义方法请参照 <a href="http://owner.aeonbits.org/" target="_blank" rel="external">++owner++</a> 文档<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Config.Sources(&quot;classpath:app_config.properties&quot;)</div><div class="line">@Config.HotReload(</div><div class="line">        value = 1, unit = java.util.concurrent.TimeUnit.MINUTES,</div><div class="line">        type = Config.HotReloadType.ASYNC)</div><div class="line">public interface APPFusingConfig extends FusingConfig &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>创建查询Command的时候在构造函数中传入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class GetPlayCountCommand extends FusingCommand&lt;Long&gt; &#123;</div><div class="line"></div><div class="line">    private final Long videoID;</div><div class="line"></div><div class="line">    public GetPlayCountCommand(Long videoID) &#123;</div><div class="line">        super( APPFusingConfig.class);  //设定配置文件</div><div class="line">        this.videoID = videoID;</div><div class="line">    &#125;</div><div class="line">        </div><div class="line">    protected Optional&lt;Long&gt; run() &#123;</div><div class="line">        Long result = 0l;</div><div class="line">        // 调用HTTP接口获取视频的播放次数信息</div><div class="line">        // 如果调用失败，返回 null 或者抛出异常，会将这次操作记录为失败</div><div class="line">        // 如果ID非法，返回 Optional.absent(),会将这次操作记录为成功</div><div class="line">        return Optional.fromNullable(result);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>配置文件内容如下：</p><table><thead><tr><th>监控项</th><th>含义</th><th>默认值</th></tr></thead><tbody><tr><td>fusing.[CommandClassName].mode</td><td>熔断模式：FORCE_NORMAL－关闭熔断功能;AUTO_FUSING－自动进入熔断模式;FORCE_NORMAL－强制进行熔断</td><td>FORCE_NORMAL</td></tr><tr><td>fusing.[CommandClassName].duration</td><td>触发一次熔断以后持续的时间，支持ms,sec,min 单位。例如 10sec</td><td>50sec</td></tr><tr><td>fusing.[CommandClassName].success_rate_threshold</td><td>触发熔断的成功率阀值，降低到这个成功率以下将触发熔断，例如0.9表示成功率90%</td><td>0.9</td></tr></tbody></table><p>配置文件中的 CommandClassName 是每个操作类的名称，可以为每个操作单独设置上述参数。同时，这个配置文件支持动态加载，乐意通过修改fusing.[CommandClassName].mode 手工触发或者关闭熔断。</p><h2 id="监控指标上报Graphite"><a href="#监控指标上报Graphite" class="headerlink" title="监控指标上报Graphite"></a>监控指标上报Graphite</h2><p>我们的服务中使用的是Metric+Graphite+Gafana进行监控数据的采集存储和展现，下面将介绍如何配置监控数据上报Grafana，关于Graphite+Grafana的配置，可以参考文章：使用<a href="https://segmentfault.com/a/1190000007540752" target="_blank" rel="external">graphite和grafana进行应用程序监控</a></p><h2 id="定义配置文件"><a href="#定义配置文件" class="headerlink" title="定义配置文件"></a>定义配置文件</h2><p>首先定义一个接口，继承自GraphiteReporterConfig，通过这个接口定义配置文件的加载路径。配置文件路径的定义方法请参照 <a href="http://owner.aeonbits.org/" target="_blank" rel="external">++owner++</a>  文档, 下面是一个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@Config.Sources(&quot;classpath:config.properties&quot;)</div><div class="line">public interface MyConfig extends GraphiteReporterConfig &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>配置文件中需要定义下列内容：</p><table><thead><tr><th>配置项</th><th>含义</th></tr></thead><tbody><tr><td>meter.reporter.enabled.hosts</td><td>开启监控上报的服务器列表</td></tr><tr><td>meter.reporter.perfix</td><td>上报使用的前缀</td></tr><tr><td>meter.reporter.carbon.host</td><td>grafana(carbon-cache) 的 IP 地址，用于存储监控数据</td></tr><tr><td>meter.reporter.carbon.port</td><td>grafana(carbon-cache) 的端口</td></tr></tbody></table><p>下面这个例子是在192.168.0.0.1和192.168.0.0.2两台服务器上开启监控数据上报，上报监控指标的前缀是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">project_name.dc：</div><div class="line"></div><div class="line">meter.reporter.enabled.hosts = 192.168.0.0.1,192.168.0.0.2</div><div class="line">meter.reporter.perfix = project_name.dc</div><div class="line">meter.reporter.carbon.host = hostname.graphite</div></pre></td></tr></table></figure></p><p>由于相同机房的不同服务器对外部接口的访问情况一般比较类似，所以仅选取部分机器上报，也是为了节省资源。仅选择部分机器上报不影响熔断效果。</p><h2 id="初始化配置上报"><a href="#初始化配置上报" class="headerlink" title="初始化配置上报"></a>初始化配置上报</h2><p>在服务初始化的时候需要对监控上报进行设置。下面的例子中开启了监控数据向日志文件的打印，同时通过MyConfig指定的配置文件加载Graphite配置信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MeterCenter.INSTANCE</div><div class="line">    .enableReporter(new EnablingLogReporter(&quot;org.apache.log4j.RollingFileAppender&quot;))</div><div class="line">    .enableReporter(new EnablingGraphiteReporter(MyConfig.class))   //监控数据上报Grafana</div><div class="line">    .init();</div></pre></td></tr></table></figure></p><h2 id="查看统计结果-1"><a href="#查看统计结果-1" class="headerlink" title="查看统计结果"></a>查看统计结果</h2><p>统计结果会以熔断命令类名为进行分组。例如前面我们定义的 GetPlayCountCommand 类,package name 是 com.test，那么在日志中的输出将会是这个样子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">type=GAUGE, name=com.test.GetPlayCountCommand.normal-rate, value=0.0</div><div class="line">type=GAUGE, name=com.test.GetPlayCountCommand.success-rate, value=61.0</div><div class="line">type=TIMER, name=com.test.GetPlayCountCommand.time, count=25866500, min=0.0, max=0.001, mean=3.963926781047921E-5, stddev=1.951102156677818E-4, median=0.0, p75=0.0, p95=0.0, p98=0.001, p99=0.001, p999=0.001, mean_rate=649806.0831335272, m1=1665370.7316699813, m5=2315813.300713087, m15=2446572.324069477, rate_unit=events/second, duration_unit=milliseconds</div></pre></td></tr></table></figure></p><table><thead><tr><th>监控项</th><th>含义</th></tr></thead><tbody><tr><td>[classname].success-rate</td><td>成功率</td></tr><tr><td>[classname].time.m1</td><td>QPS</td></tr><tr><td>[classname].time.mean</td><td>平均响应时间</td></tr><tr><td>[classname].normal-rate</td><td>过去1分钟内处于正常访问（非熔断）的时间比例</td></tr></tbody></table><p>在Grafanna中可以看到下面的监控图：<br><img src="alert.png" alt="image"></p><h2 id="自定义监控上报"><a href="#自定义监控上报" class="headerlink" title="自定义监控上报"></a>自定义监控上报</h2><p>meerkat使用<a href="http://metrics.dropwizard.io/" target="_blank" rel="external">++Metrics++</a>进行监控数据的统计，因此可以使用Metrics支持的所有reporter进行上报。添加一种上报的时候，只需要实现 EnablingReporter 并在 MeterCenter 初始化之前进行调用即可。下面是log reporter的实现，可以作为参考<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class EnablingLogReporter implements EnablingReporter &#123;</div><div class="line">    private String loggername;</div><div class="line"></div><div class="line">    public EnablingLogReporter(String loggername) &#123;</div><div class="line">        this.loggername = loggername;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void invoke(MetricRegistry metricRegistry, long period, TimeUnit timeUnit) &#123;</div><div class="line">        Slf4jReporter.forRegistry(metricRegistry)</div><div class="line">                .outputTo(LoggerFactory.getLogger(loggername))</div><div class="line">                .convertRatesTo(java.util.concurrent.TimeUnit.SECONDS)</div><div class="line">                .convertDurationsTo(java.util.concurrent.TimeUnit.MILLISECONDS)</div><div class="line">                .build().start(period, timeUnit);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>MeterCenter 初始化的时候开启reporter<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MeterCenter.INSTANCE</div><div class="line">    .enableReporter(new EnablingLogReporter(&quot;org.apache.log4j.RollingFileAppender&quot;))</div><div class="line">    .init();</div></pre></td></tr></table></figure></p><h2 id="多实例监控"><a href="#多实例监控" class="headerlink" title="多实例监控"></a>多实例监控</h2><p>多实例监控主要是为了解决一个被监控操作的实现类需要根据输入参数的不同分别进行监控和熔断的情况，通过定义实例的名称进行实现。例如获取视频播放次数的例子，获取视频播放次数的接口对于不同的视频类型而言请求逻辑是一样的，所以使用同一个类进行实现；但是对于不同的视频类型，接口实现的复杂程度不同导致成功率不同，当用户上传的视频的播次接口大量失败的时候我们不希望同时熔断电影电视剧这类视频的播放次数获取，这时就需要使用多实例这种特性进行监控和熔断。</p><p>下面是一个单实例的实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class GetPlayCountCommand extends FusingCommand&lt;Long&gt; &#123;</div><div class="line"></div><div class="line">    private final Long videoID;</div><div class="line"></div><div class="line">    public GetPlayCountCommand(Long videoID) &#123;</div><div class="line">        super( APPFusingConfig.class);</div><div class="line">        this.videoID = videoID;</div><div class="line">    &#125;</div><div class="line">        </div><div class="line">    protected Optional&lt;Long&gt; run() &#123;</div><div class="line">        Long result = 0l;</div><div class="line">        // 调用HTTP接口获取视频的播放次数信息</div><div class="line">        // 如果调用失败，返回 null 或者抛出异常，会将这次操作记录为失败</div><div class="line">        // 如果ID非法，返回 Optional.absent(),会将这次操作记录为成功</div><div class="line">        return Optional.fromNullable(result);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>假设业务上我们可以根据视频ID判断视频类型，可以在类初始化的时候根据类型创建多种监控实例，添加了多实例支持的实现如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class GetPlayCountCommand extends FusingCommand&lt;Long&gt; &#123;</div><div class="line"></div><div class="line">    private final Long videoID;</div><div class="line"></div><div class="line">    public GetPlayCountCommand(Long videoID) &#123;</div><div class="line">        super( getVideoType(videoID), APPFusingConfig.class);</div><div class="line">        this.videoID = videoID;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static String getVideoType(Long videoID)&#123;</div><div class="line">        return &quot;PGC&quot;; //根据videoID进行判断，返回 &quot;PGC&quot; 或者 &quot;UGC&quot; 这两个类别</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected Optional&lt;Long&gt; run() &#123;</div><div class="line">        Long result = 0l;</div><div class="line">        // 调用HTTP接口获取视频的播放次数信息</div><div class="line">        // 如果调用失败，返回 null 或者抛出异常，会将这次操作记录为失败</div><div class="line">        // 如果ID非法，返回 Optional.absent(),会将这次操作记录为成功</div><div class="line">        return Optional.fromNullable(result);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>由于每个实例独享一个监控指标，日志中的监控个结果是这个样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">type=GAUGE, name=com.test.GetPlayCountCommand.PGC.normal-rate, value=100.0</div><div class="line">type=GAUGE, name=com.test.GetPlayCountCommand.PGC.success-rate, value=100.0</div><div class="line">type=GAUGE, name=com.test.GetPlayCountCommand.UGC.normal-rate, value=100.0</div><div class="line">type=GAUGE, name=com.test.GetPlayCountCommand.UGC.success-rate, value=60.0</div><div class="line">type=TIMER, name=com.test.GetPlayCountCommand.PGC.time, count=100, min=0.0, max=0.509, mean=0.00635, stddev=0.05052135687013958, median=0.001, p75=0.002, p95=0.002, p98=0.003, p99=0.003, p999=0.509, mean_rate=1.6680162586215173, m1=8.691964170141569, m5=16.929634497812284, m15=18.919189378135307, rate_unit=events/second, duration_unit=milliseconds</div><div class="line">type=TIMER, name=com.test.GetPlayCountCommand.UGC.time, count=100, min=0.0, max=0.027, mean=0.00132, stddev=0.0026939933184772376, median=0.001, p75=0.001, p95=0.002, p98=0.005, p99=0.006, p999=0.027, mean_rate=1.6715904477699361, m1=8.691964170141569, m5=16.929634497812284, m15=18.919189378135307, rate_unit=events/second, duration_unit=milliseconds</div></pre></td></tr></table></figure><p>相应的，对熔断阀值以及持续时间的配置也需要明确指出实例的名字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fusing.GetPlayCountCommand.UGC.mode = AUTO_FUSING</div><div class="line">fusing.GetPlayCountCommand.UGC.duration = 50sec</div><div class="line">fusing.GetPlayCountCommand.UGC.success_rate_threshold = 0.9</div><div class="line"></div><div class="line">fusing.GetPlayCountCommand.PGC.mode = AUTO_FUSING</div><div class="line">fusing.GetPlayCountCommand.PGC.duration = 50sec</div><div class="line">fusing.GetPlayCountCommand.PGC.success_rate_threshold = 0.9</div></pre></td></tr></table></figure><p>参考资料<br><a href="https://segmentfault.com/a/1190000009730789" target="_blank" rel="external">https://segmentfault.com/a/1190000009730789</a></p><p>有问题可以联系博主，博客主页有邮箱，微博，文章底部有微信公众号等联系方式。</p><p>转载请注明出处，谢谢！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;meerkat进行服务监控和服务降级&quot;&gt;&lt;a href=&quot;#meerkat进行服务监控和服务降级&quot; class=&quot;headerlink&quot; title=&quot;meerkat进行服务监控和服务降级&quot;&gt;&lt;/a&gt;meerkat进行服务监控和服务降级&lt;/h1&gt;&lt;p&gt;meerka
      
    
    </summary>
    
      <category term="java" scheme="http://luojiamingl.github.io/categories/java/"/>
    
    
      <category term="java" scheme="http://luojiamingl.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Linux中date命令的各种实用方法</title>
    <link href="http://luojiamingl.github.io/2018/01/10/Linux%E4%B8%ADdate%E5%91%BD%E4%BB%A4%E7%9A%84%E5%90%84%E7%A7%8D%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://luojiamingl.github.io/2018/01/10/Linux中date命令的各种实用方法/</id>
    <published>2018-01-10T11:59:22.000Z</published>
    <updated>2018-01-10T07:59:20.474Z</updated>
    
    <content type="html"><![CDATA[<p> Linux中date命令的各种实用方法</p><a id="more"></a><p>用法：date [选项]… [+格式]<br>　或：date [-u|–utc|–universal] [MMDDhhmm[[CC]YY][.ss]]<br>以给定的格式显示当前时间，或是设置系统日期。</p><p>  -d,–date=字符串              显示指定字符串所描述的时间，而非当前时间</p><p>  -f,–file=日期文件            类似–date，从日期文件中按行读入时间描述</p><p>  -r, –reference=文件          显示文件指定文件的最后修改时间</p><p>  -s, –set=字符串              设置指定字符串来分开时间</p><p>  -u, –utc, –universal        输出或者设置协调的通用时间<br>      –help            显示此帮助信息并退出<br>      –version         显示版本信息并退出</p><p>读者可以设定特定的格式，格式设定规则：一个加号后接数个标记，每个标记中都有%，其中可用的标记列表和说明如下:</p><p>%n : 下一行</p><p>%t : 跳格</p><p>%H : 小时(00..23)</p><p>%I : 小时(01..12)</p><p>%k : 小时(0..23)</p><p>%l : 小时(1..12)</p><p>%M : 分钟(00..59)</p><p>%p : 显示本地 AM 或 PM</p><p>%r : 直接显示时间 (12 小时制，格式为 hh:mm:ss [AP]M)</p><p>%s : 从 1970 年 1 月 1 日 00:00:00 UTC 到目前为止的秒数<br>%S : 秒(00..59)</p><p>%T : 直接显示时间 (24 小时制)</p><p>%X : 相当于 %H:%M:%S</p><p>%Z : 显示时区 %a : 星期几 (Sun..Sat)</p><p>%A : 星期几<br>(Sunday..Saturday)</p><p>%b : 月份 (Jan..Dec)</p><p>%B : 月份 (January..December)</p><p>%c : 直接显示日期与时间</p><p>%d : 日 (01..31)</p><p>%D : 直接显示日期 (mm/dd/yy)</p><p>%h : 同 %b</p><p>%j : 一年中的第几天 (001..366)</p><p>%m : 月份 (01..12)</p><p>%U : 一年中的第几周 (00..53) (以 Sunday 为一周的第一天的情形)</p><p>%w : 一周中的第几天 (0..6)</p><p>%W : 一年中的第几周 (00..53) (以 Monday 为一周的第一天的情形)</p><p>%x : 直接显示日期 (mm/dd/yy)</p><p>%y : 年份的最后两位数字 (00.99)</p><p>%Y : 完整年份 (0000..9999)</p><p>##1.按照特定的格式输出时间：短接符”-“、空格” “和冒号”:” 为分隔符，其中空格前面加了转义符号”\”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@RHEL601 tmp]# date +%Y-%m-%d\ %H:%M:%S</div><div class="line">2012-07-19 21:10:28</div></pre></td></tr></table></figure><p>在当前时间的基础上往前推或者往后推三天<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@RHEL601 tmp]# date -d &quot;+3 day&quot; </div><div class="line">2012年 07月 22日 星期日 20:12:08 CST</div><div class="line">[root@RHEL601 tmp]# date -d &quot;-3 day&quot;  </div><div class="line">2012年 07月 16日 星期一 20:12:12 CST</div></pre></td></tr></table></figure></p><p>在当前时间的基础上往前推或者往后推三个月<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@RHEL601 tmp]# date -d &quot;-3 month&quot;    </div><div class="line">2012年 04月 19日 星期四 20:12:39 CST</div><div class="line">[root@RHEL601 tmp]# date -d &quot;+3 month&quot;  </div><div class="line">2012年 10月 19日 星期五 20:12:48 CST</div></pre></td></tr></table></figure></p><p>在当前时间的基础上往前推或者往后推三年<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@RHEL601 tmp]# date -d &quot;+3 year&quot;      </div><div class="line">2015年 07月 19日 星期日 20:13:06 CST</div><div class="line">[root@RHEL601 tmp]# date -d &quot;-3 year&quot;   </div><div class="line">2009年 07月 19日 星期日 20:13:11 CST</div></pre></td></tr></table></figure></p><p>在当前时间的基础上往前推或者往后推三小时<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@RHEL601 tmp]# date -d &quot;-3 hour&quot;     </div><div class="line">2012年 07月 19日 星期四 17:13:20 CST</div><div class="line">[root@RHEL601 tmp]# date -d &quot;+3 hour&quot;  </div><div class="line">2012年 07月 19日 星期四 23:13:24 CST</div></pre></td></tr></table></figure></p><p>在当前时间的基础上往前推或者往后推三分钟<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@RHEL601 tmp]# date -d &quot;+3 minute&quot;       </div><div class="line">2012年 07月 19日 星期四 20:16:56 CST</div><div class="line">[root@RHEL601 tmp]# date -d &quot;-3 minute&quot;  </div><div class="line">2012年 07月 19日 星期四 20:10:59 CST</div></pre></td></tr></table></figure></p><p>在当前时间的基础上往前推或者往后推三十秒<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@RHEL601 tmp]# date &amp;&amp; date -d &quot;-30 second&quot;         </div><div class="line">2012年 07月 19日 星期四 20:14:24 CST</div><div class="line">2012年 07月 19日 星期四 20:13:54 CST</div><div class="line">[root@RHEL601 tmp]# date &amp;&amp; date -d &quot;+30 second&quot;  </div><div class="line">2012年 07月 19日 星期四 20:14:29 CST</div><div class="line">2012年 07月 19日 星期四 20:14:59 CST</div></pre></td></tr></table></figure></p><p>##2、接下来的范例说明如何用date来表示各种各样的时间，表示的都是某一天的零点时间，也可以在当前的时分秒的基础上表示时间，(特别注意中间用到了反单引号`)参见范例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">date -d `date +%y%m01` #本月第一天</div><div class="line">[root@RHEL601 tmp]# date -d `date +%y%m01`</div><div class="line">2012年 07月 01日 星期日 00:00:00 CST</div><div class="line"></div><div class="line">date -d `date +%y%m01`&quot;-1 day&quot;  #上个月最后一天</div><div class="line">[root@RHEL601 tmp]# date -d `date +%y%m01`&quot;-1 day&quot;</div><div class="line">2012年 06月 30日 星期六 00:00:00 CST</div><div class="line"></div><div class="line">date -d `date -d &quot;-3 month&quot; +%y%m01`&quot;-1 day&quot; #4个月前的第一天</div><div class="line">[root@RHEL601 tmp]# date -d `date -d &quot;-3 month&quot; +%y%m01`&quot;-1 day&quot;</div><div class="line">2012年 03月 31日 星期六 00:00:00 CST</div><div class="line"></div><div class="line">date -d `date -d &quot;+12 month&quot; +%y%m01`&quot;-1 day&quot; #第11个月后的第一天</div><div class="line">[root@RHEL601 tmp]# date -d `date -d &quot;+12 month&quot; +%y%m01`&quot;-1 day&quot;</div><div class="line">2013年 06月 30日 星期日 00:00:00 CST</div><div class="line"></div><div class="line">date -d `date -d &quot;-1 month&quot; +%y%m01` #上个月第一天</div><div class="line">[root@RHEL601 tmp]# date -d `date -d &quot;-1 month&quot; +%y%m01`</div><div class="line">2012年 06月 01日 星期五 00:00:00 CST</div><div class="line"></div><div class="line"></div><div class="line">date -d `date -d &quot;+12 month&quot; +%y%m01` #第12个月后的第一天</div><div class="line">[root@RHEL601 tmp]# date -d `date -d &quot;+12 month&quot; +%y%m01`</div><div class="line">2013年 07月 01日 星期一 00:00:00 CST</div><div class="line"></div><div class="line">date -d `date -d &quot;-1 day&quot; +%Y%m%d` #前一天零点时间</div><div class="line">[root@RHEL601 tmp]# date -d `date -d &quot;-1 day&quot; +%Y%m%d`</div><div class="line">2012年 07月 18日 星期三 00:00:00 CST</div><div class="line"></div><div class="line">date -d `date -d &quot;-3 day&quot; +%Y%m%d` #前三天零点时间</div><div class="line">[root@RHEL601 tmp]# date -d `date -d &quot;-3 day&quot; +%Y%m%d` </div><div class="line">2012年 07月 16日 星期一 00:00:00 CST</div><div class="line"></div><div class="line">date -d `date -d &quot;+1 day&quot; +%Y%m%d` #明天零点时间</div><div class="line">[root@RHEL601 tmp]# date -d `date -d &quot;+1 day&quot; +%Y%m%d`  </div><div class="line">2012年 07月 20日 星期五 00:00:00 CST</div><div class="line"></div><div class="line">date -d `date -d &quot;+3 day&quot; +%Y%m%d` #往后推三天零点时间</div><div class="line">[root@RHEL601 tmp]# date -d `date -d &quot;+3 day&quot; +%Y%m%d` </div><div class="line">2012年 07月 22日 星期日 00:00:00 CST</div></pre></td></tr></table></figure></p><p>##3、以下简单示范了字母大小写在date命令中的区别<br>Y #代表完整的年份，例如:2012年 将显示 2012<br>y #代表缩写年份，例如：2012年 缩写为 12<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@RHEL601 tmp]# date +&quot;%y%m01%H%M%S&quot;</div><div class="line">121201121556</div><div class="line">[root@RHEL601 tmp]# date +&quot;%Y%m01%H%M%S&quot;</div><div class="line">20121201121610</div></pre></td></tr></table></figure></p><p>##4、以下范例说明如何调整服务器的时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ntpdate 210.72.145.44</div></pre></td></tr></table></figure></p><p>将服务器时间调整为正常时间，210.72.145.44 是国家授时中心服务器IP地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@RHEL601 tmp]# ntpdate 210.72.145.44</div><div class="line">19 Jul 13:07:07 ntpdate[15150]: adjust time server 210.72.145.44 offset -0.020920 sec</div></pre></td></tr></table></figure></p><p>date 121212122012</p><p>将时间设置为2012年 12月 12日 星期三 12:12:00，date后面的数字代表月日时分年，还可以加秒，需要后面跟英文状态下的句号字符”.”，例如：121212122012.12<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">[root@RHEL601 tmp]# date 121212122012</div><div class="line">2012年 12月 12日 星期三 12:12:00 CST</div><div class="line">[root@RHEL601 tmp]# date 121212122012.12</div><div class="line">2012年 12月 12日 星期三 12:12:12 CST</div><div class="line"></div><div class="line">[root@RHEL601 tmp]# date `date -d &quot;1 day ago&quot; +%m%d%H%M%Y.%S`</div><div class="line">2012年 07月 18日 星期三 20:13:04 CST</div><div class="line">[root@RHEL601 tmp]# date</div><div class="line">2012年 07月 18日 星期三 20:13:10 CST</div><div class="line">[root@RHEL601 tmp]# date `date -d &quot;3 days ago&quot; +%m%d%H%M%Y.%S`</div><div class="line">2012年 07月 15日 星期日 20:13:18 CST</div><div class="line">[root@RHEL601 tmp]# date `date -d &quot;5 days ago&quot; +%m%d%H%M%Y.%S`</div><div class="line">2012年 07月 10日 星期二 20:13:28 CST</div><div class="line">[root@RHEL601 tmp]# date `date -d &quot;$((3600*24)) seconds ago&quot; +%m%d%H%M%Y.%S`</div><div class="line">2012年 07月 09日 星期一 20:13:39 CST</div><div class="line">[root@RHEL601 tmp]# date `date -d &quot;$((3600*24)) seconds ago&quot; +%m%d%H%M%Y.%S`</div><div class="line">2012年 07月 08日 星期日 20:14:01 CST</div><div class="line">[root@RHEL601 tmp]# ntpdate 210.72.145.44</div><div class="line">19 Jul 20:14:15 ntpdate[26846]: step time server 210.72.145.44 offset 950404.037565 sec</div></pre></td></tr></table></figure></p><p>参考资料<br><a href="http://blog.chinaunix.net/uid-22823163-id-3293784.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-22823163-id-3293784.html</a></p><p>有问题可以联系博主，博客主页有邮箱，微博，文章底部有微信公众号等联系方式。</p><p>转载请注明出处，谢谢！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; Linux中date命令的各种实用方法&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://luojiamingl.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="linux" scheme="http://luojiamingl.github.io/categories/%E7%BC%96%E7%A8%8B/linux/"/>
    
    
      <category term="shell" scheme="http://luojiamingl.github.io/tags/shell/"/>
    
      <category term="脚本" scheme="http://luojiamingl.github.io/tags/%E8%84%9A%E6%9C%AC/"/>
    
      <category term="linux" scheme="http://luojiamingl.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>shell 输出重定向（&gt; &gt;&gt; 2&gt;&amp;1）</title>
    <link href="http://luojiamingl.github.io/2018/01/10/shell%20%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91%EF%BC%88%3E%20%3E%3E%202%3E&amp;1%EF%BC%89/"/>
    <id>http://luojiamingl.github.io/2018/01/10/shell 输出重定向（&gt; &gt;&gt; 2&gt;&amp;1）/</id>
    <published>2018-01-10T11:59:22.000Z</published>
    <updated>2018-01-10T08:03:15.669Z</updated>
    
    <content type="html"><![CDATA[<p>shell - 输出重定向（&gt; &gt;&gt; 2&gt;&amp;1）</p><a id="more"></a><h1 id="一、bash中0，1，2"><a href="#一、bash中0，1，2" class="headerlink" title="一、bash中0，1，2"></a>一、bash中0，1，2</h1><p>bash中0，1，2三个数字分别代表STDIN_FILENO、STDOUT_FILENO、STDERR_FILENO，即标准输入（一般是键盘），标准输出（一般是显示屏，准确的说是用户终端控制台），标准错误（出错信息输出）</p><h1 id="二、输入输出重定向"><a href="#二、输入输出重定向" class="headerlink" title="二、输入输出重定向"></a>二、输入输出重定向</h1><p>所谓重定向输入就是在命令中指定具体的输入来源，譬如 cat &lt; test.c 将test.c重定向为cat命令的输入源。输出重定向是指定具体的输出目标以替换默认的标准输出，譬如ls &gt; 1.txt将ls的结果从标准输出重定向为1.txt文本。有时候会看到如 ls &gt;&gt; 1.txt这类的写法，&gt; 和 &gt;&gt; 的区别在于：&gt; 用于新建而&gt;&gt;用于追加。即ls &gt; 1.txt会新建一个1.txt文件并且将ls的内容输出到新建的1.txt中，而ls &gt;&gt; 1.txt则用在1.txt已经存在，而我们只是想将ls的内容追加到1.txt文本中的时候。</p><p>默认输入只有一个（0，STDIN_FILENO），而默认输出有两个（标准输出1 STDOUT_FILENO，标准错误2 STDERR_FILENO）。因此默认情况下，shell输出的错误信息会被输出到2，而普通输出信息会输出到1。但是某些情况下，我们希望在一个终端下看到所有的信息（包括标准输出信息和错误信息），要怎么办呢？<br>对了，你可以使用我们上面讲到的输出重定向。思路有了，怎么写呢？ 非常直观的想法就是2&gt;1（将2重定向到1嘛），行不行呢？试一试就知道了。我们进行以下测试步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1）mkdir test &amp;&amp; cd test; 创建test文件夹并进入test目录</div><div class="line">2）touch a.txt b.c c; 创建a.txt b.c c 三个文件</div><div class="line">3）ls &gt; 1; 按我们的猜测，这句应该是将ls的结果重定向到标准输出，因此效果和直接ls应该一样。但是实际这句执行后，标准输出中并没有任何信息。</div><div class="line">4）ls; 执行3之后再次ls，则会看到test文件夹中多了一个文件1</div><div class="line">5）cat 1 ; 查看文件1的内容，实际结果为：1 a.txt b.c c</div></pre></td></tr></table></figure><p>可见步骤3中 ls &gt; 1并不是将ls的结果重定向为标准输出，而是将结果重定向到了一个文件1中。即1在此处不被解释为STDOUT_FILENO，而是文件1。</p><p>4、到了此时，你应该也能猜到2&gt;&amp;1的用意了。不错，2&gt;&amp;1就是用来将标准错误2重定向到标准输出1中的。此处1前面的&amp;就是为了让bash将1解释成标准输出而不是文件1。至于最后一个&amp;，则是让bash在后台执行           </p><h1 id="三、例子🌰"><a href="#三、例子🌰" class="headerlink" title="三、例子🌰"></a>三、例子🌰</h1><p><strong><em>1</em>.输出重定向</strong></p><p>1.1把标准输出重定向到文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[~]# echo &quot;hello&quot; &gt; test.sh</div><div class="line">[~]# cat test.sh</div><div class="line">hello</div><div class="line">&apos;&gt;&apos;输出方式默认等价&apos;1&gt;&apos;</div><div class="line">[~]# echo &quot;hello&quot; 1&gt; test.sh</div><div class="line">[~]# cat test.sh</div><div class="line">hello</div></pre></td></tr></table></figure><p>输入、输出及标准错误输出主要用于 I/O 的重定向，就是说需要改变他们的默认设置。先看这个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ls &gt; ls_result $ ls -l &gt;&gt; ls_result</div></pre></td></tr></table></figure></p><p>上面这两个命令分别将 ls 命令的结果输出重定向到 ls_result 文件中和追加到 ls_result 文件中，而不是输出到屏幕上。”&gt;”就是输出（标准输出和标准错误输出）重定向的代表符号，连续两个 “&gt;” 符号，即 “&gt;&gt;” 则表示不清除原来的而追加输出。下面再来看一个稍微复杂的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ find /home -name lost* 2&gt; err_result</div></pre></td></tr></table></figure></p><p>这个命令在 “&gt;” 符号之前多了一个 “2”，”2&gt;” 表示将标准错误输出重定向。由于 /home 目录下有些目录由于权限限制不能访问，因此会产生一些标准错误输出被存放在 err_result 文件中。</p><p>大家可以设想一下 find /home -name lost<em> 2&gt;&gt;err_result 命令会产生什么结果？<br>如果直接执行 find /home -name lost</em> &gt; all_result ，其结果是只有标准输出被存入 all_result 文件中，要想让标准错误输出和标准输入一样都被存入到文件中，那该怎么办呢？看下面这个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ find /home -name lost* &gt; all_result 2&gt;&amp; 1</div></pre></td></tr></table></figure></p><p>上面这个例子中将首先将标准错误输出也重定向到标准输出中，再将标准输出重定向到 all_result 这个文件中。这样我们就可以将所有的输出都存储到文件中了。为实现上述功能，还有一种简便的写法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ find /home -name lost* &gt;&amp; all_result</div></pre></td></tr></table></figure></p><p>如果那些出错信息并不重要，下面这个命令可以让你避开众多无用出错信息的干扰：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ find /home -name lost* 2&gt; /dev/null</div></pre></td></tr></table></figure></p><p>同学们回去后还可以再试验一下如下几种重定向方式，看看会出什么结果，为什么？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ find /home -name lost* &gt; all_result 1&gt;&amp; 2 $ find /home -name lost* 2&gt; all_result 1&gt;&amp; 2 $ find /home -name lost* 2&gt;&amp; 1 &gt; all_result</div></pre></td></tr></table></figure></p><p>另外一个非常有用的重定向操作符是 “-“，请看下面这个例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ (cd /source/directory &amp;&amp; tar cf - . ) | (cd /dest/directory &amp;&amp; tar xvfp -)</div></pre></td></tr></table></figure></p><p>该命令表示把 /source/directory 目录下的所有文件通过压缩和解压，快速的全部移动到 /dest/directory 目录下去，这个命令在 /source/directory 和 /dest/directory 不处在同一个文件系统下时将显示出特别的优势。<br>下面还几种不常见的用法：<br>n&lt;&amp;- 表示将 n 号输入关闭 &lt;&amp;- 表示关闭标准输入（键盘） n&gt;&amp;- 表示将 n 号输出关闭 &gt;&amp;- 表示将标准输出关闭</p><p>参考资料<br><a href="http://qinqianshan.com/shell-output-redirection-21/" target="_blank" rel="external">http://qinqianshan.com/shell-output-redirection-21/</a></p><p><a href="http://blog.csdn.net/feng27156/article/details/38980543" target="_blank" rel="external">http://blog.csdn.net/feng27156/article/details/38980543</a></p><p>有问题可以联系博主，博客主页有邮箱，微博，文章底部有微信公众号等联系方式。</p><p>转载请注明出处，谢谢！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;shell - 输出重定向（&amp;gt; &amp;gt;&amp;gt; 2&amp;gt;&amp;amp;1）&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://luojiamingl.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="linux" scheme="http://luojiamingl.github.io/categories/%E7%BC%96%E7%A8%8B/linux/"/>
    
    
      <category term="shell" scheme="http://luojiamingl.github.io/tags/shell/"/>
    
      <category term="脚本" scheme="http://luojiamingl.github.io/tags/%E8%84%9A%E6%9C%AC/"/>
    
      <category term="重定向" scheme="http://luojiamingl.github.io/tags/%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>shell中条件判断if中的-a到-z的意思</title>
    <link href="http://luojiamingl.github.io/2018/01/10/shell%E4%B8%AD%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%ADif%E4%B8%AD%E7%9A%84-a%E5%88%B0-z%E7%9A%84%E6%84%8F%E6%80%9D/"/>
    <id>http://luojiamingl.github.io/2018/01/10/shell中条件判断if中的-a到-z的意思/</id>
    <published>2018-01-10T11:59:22.000Z</published>
    <updated>2018-01-10T08:03:15.664Z</updated>
    
    <content type="html"><![CDATA[<p>shell中条件判断if中的-a到-z的意思</p><a id="more"></a><p>[-a file] 如果file存在则为真 </p><p>[-b file] 如果file存在且是一个块特殊文件则为真 </p><p>[-c file] 如果file存在且是一个字特殊文件则为真 </p><p>[-d file] 如果file文件存在且是一个目录则为真<br>-d前的!是逻辑非<br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if [ ! -d $lcd_path/$par_date ]</div></pre></td></tr></table></figure></p><p>表示后面的那个目录不存在，则执行后面的then操作 </p><p>[-e file] 如果file文件存在则为真 </p><p>[-f file] 如果file存在且是一个普通文件则为真 </p><p>[-g file] 如果file存在且已经设置了SGID则为真（SUID 是 Set User ID, SGID 是 Set Group ID的意思） </p><p>[-h file] 如果file存在且是一个符号连接则为真 </p><p>[-k file] 如果file存在且已经设置粘制位则为真<br>当一个目录被设置为”粘制位”(用chmod a+t),则该目录下的文件只能由<br>一、超级管理员删除<br>二、该目录的所有者删除<br>三、该文件的所有者删除<br>也就是说,即便该目录是任何人都可以写,但也只有文件的属主才可以删除文件。<br>具体例子如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#ls -dl /tmp </div><div class="line">drwxrwxrwt 4 root    root </div><div class="line">.........</div></pre></td></tr></table></figure></p><p>注意other位置的t，这便是粘连位。 </p><p>[-p file] 如果file存在且是一个名字管道（F如果O）则为真<br>管道是linux里面进程间通信的一种方式，其他的还有像信号（signal）、信号量、消息队列、共享内存、套接字（socket）等。</p><p>[-r file] 如果file存在且是可读的则为真 </p><p>[-s file] 如果file存在且大小不为0则为真</p><p>[-t FD] 如果文件描述符FD打开且指向一个终端则为真 </p><p>[-u file] 如果file存在且设置了SUID（set userID）则为真 </p><p>[-w file] 如果file存在且是可写的则为真</p><p>[-x file] 如果file存在且是可执行的则为真</p><p>[-O file] 如果file存在且属有效用户ID则为真 </p><p>[-G file] 如果file存在且属有效用户组则为真 </p><p>[-L file] 如果file存在且是一个符号连接则为真 </p><p>[-N file] 如果file存在and has been mod如果ied since it was last read则为真 </p><p>[-S file] 如果file存在且是一个套接字则为真 </p><p>[file1 –nt file2] 如果file1 has been changed more recently than file2或者file1 exists and file2 does not则为真 </p><p>[file1 –ot file2] 如果file1比file2要老，或者file2存在且file1不存在则为真 </p><p>[file1 –ef file2] 如果file1和file2指向相同的设备和节点号则为真 </p><p>[-o optionname] 如果shell选项“optionname”开启则为真 </p><p>[-z string] “string”的长度为零则为真 </p><p>[-n string] or [string] “string”的长度为非零non-zero则为真 </p><p>[sting1==string2] 如果2个字符串相同。“=”may be used instead of “==”for strict posix compliance则为真 </p><p>[string1!=string2] 如果字符串不相等则为真<br>[string1&lt;string2] 如果“string1”sorts before“string2”lexicographically in the current locale则为真</p><p>[arg1 OP arg2] “OP”is one of –eq,-ne,-lt,-le,-gt or –ge.These arithmetic binary oprators return true if “arg1”is equal to,not equal to,less than,less than or equal to,greater than,or greater than or equal to“agr2”,respectively.“arg1”and “agr2”are integers. </p><p>参考资料<br><a href="http://blog.csdn.net/vergilgeekopen/article/details/69493321" target="_blank" rel="external">http://blog.csdn.net/vergilgeekopen/article/details/69493321</a></p><p>有问题可以联系博主，博客主页有邮箱，微博，文章底部有微信公众号等联系方式。</p><p>转载请注明出处，谢谢！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;shell中条件判断if中的-a到-z的意思&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://luojiamingl.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="linux" scheme="http://luojiamingl.github.io/categories/%E7%BC%96%E7%A8%8B/linux/"/>
    
    
      <category term="shell" scheme="http://luojiamingl.github.io/tags/shell/"/>
    
      <category term="脚本" scheme="http://luojiamingl.github.io/tags/%E8%84%9A%E6%9C%AC/"/>
    
      <category term="linux" scheme="http://luojiamingl.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>sublime注册码破解及关闭自动更新</title>
    <link href="http://luojiamingl.github.io/2017/09/30/sublime%E7%A0%B4%E8%A7%A3%E5%8F%8A%E5%85%B3%E9%97%AD%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/"/>
    <id>http://luojiamingl.github.io/2017/09/30/sublime破解及关闭自动更新/</id>
    <published>2017-09-30T07:46:22.000Z</published>
    <updated>2018-01-10T08:00:21.377Z</updated>
    
    <content type="html"><![CDATA[<p>sublime - 丰富的文本编辑器，使用技巧</p><a id="more"></a><h1 id="破解方法"><a href="#破解方法" class="headerlink" title="破解方法"></a>破解方法</h1><p>话不多说，先分享三个注册码！<br>点击最右侧 help add license，添加注册码即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">—– BEGIN LICENSE —–</div><div class="line">Michael Barnes</div><div class="line">Single User License</div><div class="line">EA7E-821385</div><div class="line">8A353C41 872A0D5C DF9B2950 AFF6F667</div><div class="line">C458EA6D 8EA3C286 98D1D650 131A97AB</div><div class="line">AA919AEC EF20E143 B361B1E7 4C8B7F04</div><div class="line">B085E65E 2F5F5360 8489D422 FB8FC1AA</div><div class="line">93F6323C FD7F7544 3F39C318 D95E6480</div><div class="line">FCCC7561 8A4A1741 68FA4223 ADCEDE07</div><div class="line">200C25BE DBBC4855 C4CFB774 C5EC138C</div><div class="line">0FEC1CEF D9DCECEC D3A5DAD1 01316C36</div><div class="line">—— END LICENSE ——</div><div class="line"></div><div class="line">—– BEGIN LICENSE —–</div><div class="line">Nicolas Hennion</div><div class="line">Single User License</div><div class="line">EA7E-866075</div><div class="line">8A01AA83 1D668D24 4484AEBC 3B04512C</div><div class="line">827B0DE5 69E9B07A A39ACCC0 F95F5410</div><div class="line">729D5639 4C37CECB B2522FB3 8D37FDC1</div><div class="line">72899363 BBA441AC A5F47F08 6CD3B3FE</div><div class="line">CEFB3783 B2E1BA96 71AAF7B4 AFB61B1D</div><div class="line">0CC513E7 52FF2333 9F726D2C CDE53B4A</div><div class="line">810C0D4F E1F419A3 CDA0832B 8440565A</div><div class="line">35BF00F6 4CA9F869 ED10E245 469C233E</div><div class="line">—— END LICENSE ——</div><div class="line"></div><div class="line">—– BEGIN LICENSE —–</div><div class="line">Anthony Sansone</div><div class="line">Single User License</div><div class="line">EA7E-878563</div><div class="line">28B9A648 42B99D8A F2E3E9E0 16DE076E</div><div class="line">E218B3DC F3606379 C33C1526 E8B58964</div><div class="line">B2CB3F63 BDF901BE D31424D2 082891B5</div><div class="line">F7058694 55FA46D8 EFC11878 0868F093</div><div class="line">B17CAFE7 63A78881 86B78E38 0F146238</div><div class="line">BAE22DBB D4EC71A1 0EC2E701 C7F9C648</div><div class="line">5CF29CA3 1CB14285 19A46991 E9A98676</div><div class="line">14FD4777 2D8A0AB6 A444EE0D CA009B54</div><div class="line">—— END LICENSE ——</div><div class="line">—– BEGIN LICENSE —–</div><div class="line">Alexey Plutalov</div><div class="line">Single User License</div><div class="line">EA7E-860776</div><div class="line">3DC19CC1 134CDF23 504DC871 2DE5CE55</div><div class="line">585DC8A6 253BB0D9 637C87A2 D8D0BA85</div><div class="line">AAE574AD BA7D6DA9 2B9773F2 324C5DEF</div><div class="line">17830A4E FBCF9D1D 182406E9 F883EA87</div><div class="line">E585BBA1 2538C270 E2E857C2 194283CA</div><div class="line">7234FF9E D0392F93 1D16E021 F1914917</div><div class="line">63909E12 203C0169 3F08FFC8 86D06EA8</div><div class="line">73DDAEF0 AC559F30 A6A67947 B60104C6</div><div class="line">—— END LICENSE ——</div></pre></td></tr></table></figure></p><h1 id="关闭自动更新"><a href="#关闭自动更新" class="headerlink" title="关闭自动更新"></a>关闭自动更新</h1><p>如图打开,添加如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// Settings in here override those in &quot;Default/Preferences.sublime-settings&quot;,</div><div class="line">// and are overridden in turn by file type specific settings.</div><div class="line">&#123;</div><div class="line">&quot;update_check&quot; : false</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="sublime.png" alt="image"></p><p><strong><em>注意</em></strong>：博主添加代码时发现自动更新提醒还是会弹出来，后来发现是没有破解，破解之后就不会弹出来了</p><p>转载请注明出处，谢谢！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;sublime - 丰富的文本编辑器，使用技巧&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://luojiamingl.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="软件破解" scheme="http://luojiamingl.github.io/categories/%E7%BC%96%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%A0%B4%E8%A7%A3/"/>
    
    
      <category term="sublime" scheme="http://luojiamingl.github.io/tags/sublime/"/>
    
      <category term="破解" scheme="http://luojiamingl.github.io/tags/%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>零基础搭建Hexo炫酷静态页面博客</title>
    <link href="http://luojiamingl.github.io/2017/09/29/%E9%9B%B6%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BAHexo%E7%82%AB%E9%85%B7%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E5%8D%9A%E5%AE%A2/"/>
    <id>http://luojiamingl.github.io/2017/09/29/零基础搭建Hexo炫酷静态页面博客/</id>
    <published>2017-09-29T11:59:22.000Z</published>
    <updated>2018-01-10T08:00:21.370Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo - 快速、简洁且高效的博客框架</p><a id="more"></a><h1 id="GitHubPages-hexo-简介"><a href="#GitHubPages-hexo-简介" class="headerlink" title="GitHubPages + hexo 简介"></a>GitHubPages + hexo 简介</h1><p>最近花了两天的时间搭建了一个博客，使用GitHubPages + hexo </p><p>为什么选用GitHubPages + hexo   优点如下：</p><p><strong><em>1</em>.超快速度</strong><br>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</p><p><strong><em>2</em>.支持 Markdown</strong><br>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</p><p><strong><em>3</em>.一键部署</strong><br>只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。</p><p><strong><em>4</em>.丰富的插件</strong><br>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</p><p><a href="https://luojiamingl.github.io/"><font color="green"><strong><em>博客地址</em></strong></font></a></p><p><img src="blok.png" alt="image"></p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>github账号<br>node.js<br>npm<br>hexo<br>注意：（node.js 集成带有npm，因此只要下载 node.js 就可以了）</p><p>github上创建GitHubPages仓库<br>GitHubPages<br><a href="https://pages.github.com" target="_blank" rel="external"><font color="blue">官方参考地址</font></a></p><p><strong><em>注意</em></strong>：</p><p>创建仓库的时候仓库名一定严格按照 git用户名.github.io 来命名<br>创建仓库完成之后，在本地创建一个站点文件夹 git用户名.github.io/blog</p><h2 id="下载node-js"><a href="#下载node-js" class="headerlink" title="下载node.js"></a>下载node.js</h2><p>我是在mac系统上搭建的，下载用的终端<a href="https://brew.sh/index_zh-cn.html" target="_blank" rel="external"><font color="blue">brew</font></a>命令，如果其他系统或者没有翻墙，可能会有问题，如果下载失败可以移步<a href="https://nodejs.org/zh-cn/" target="_blank" rel="external"><font color="blue">Node.js</font></a>官网，下载最新版本一路安装即可。<br>检测安装是否成功 终端输入 node -v ,npm -v 成功则显示版本号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  blog git:(master) ✗ npm -v</div><div class="line">5.3.0</div><div class="line">➜  blog git:(master) ✗</div></pre></td></tr></table></figure></p><h2 id="下载-hexo"><a href="#下载-hexo" class="headerlink" title="下载 hexo"></a>下载 hexo</h2><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external"><font color="blue">hexo官方</font></a> 有详细的windows和mac用户的安装文档，如果因为防火墙等原因安装失败，请使用下面命令安装，sudo赋予命令最高权限，避免权限不足</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜  blog git:(master)  sudo npm install hexo --no-optional</div></pre></td></tr></table></figure><h2 id="下载git"><a href="#下载git" class="headerlink" title="下载git"></a>下载git</h2><p><a href="https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git" target="_blank" rel="external"><font color="blue">文档说明</font></a>，上面有各个平台的git下载安装步骤，按照步骤安装即可</p><h2 id="本地关联github仓库"><a href="#本地关联github仓库" class="headerlink" title="本地关联github仓库"></a>本地关联github仓库</h2><p>git下载安装完成之后，需要跟你的github仓库关联起来，你需要一个私钥和公钥，首先查看本地有没有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  ~ git:(master) ✗ cd ~/.ssh </div><div class="line">➜  .ssh git:(master) ✗ ls</div><div class="line">config      id_rsa      id_rsa.pub  known_hosts</div><div class="line">➜  .ssh git:(master) ✗</div></pre></td></tr></table></figure></p><p>如果没有id_rsa（私钥）和id_rsa.pub（公钥）就需要手动生成一个，执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜  ~ git:(master) ✗ ssh-keygen</div></pre></td></tr></table></figure></p><p>生成双钥，然后把公钥放到github仓库上，点击头像选择settings<br><img src="githubkey1.png" alt="image"><br>左侧找到SSH，然后点击New SSH key，把公钥的文本内容粘贴进去，就可以了<br><img src="githubkey2.png" alt="image"></p><h1 id="部署hexo"><a href="#部署hexo" class="headerlink" title="部署hexo"></a>部署hexo</h1><h2 id="命令介绍"><a href="#命令介绍" class="headerlink" title="命令介绍"></a>命令介绍</h2><p>准备工作完成，就可以部署看一下博客界面效果了,先介绍一下hexo常用命令</p><ul><li>hexo clean 清除编辑后生成的静态文件，一般部署前都会执行一遍，防止上次部署结果影响新的文件内容</li><li>hexo generate 编辑生成静态页面等</li><li>hexo server 启动服务</li><li>hexo develop 部署到远程github，需要修改配置文件，稍后介绍</li></ul><p>基本上用到的就是这些命令，为了方便可以设置快捷指令，执行如下命令，会在跟目录生成一个.bash_profile文件，同时打开.bash_profile进入编辑模式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  ~ git:(master) ✗ cd ~</div><div class="line">➜  ~ git:(master) ✗ vi .bash_profile</div></pre></td></tr></table></figure></p><p>然后输入以下内容,进行保存，<a href="http://man.linuxde.net/par/1/page/3" target="_blank" rel="external"><font color="blue">linux命令</font></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">alias hexo clean=hexo c</div><div class="line">alias hexo generate=hexo g</div><div class="line">alias hexo server=hexo s</div><div class="line">alias hexo develop=hexo d</div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">-- INSERT --</div></pre></td></tr></table></figure></p><p>执行如下命令，让文件生效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜  ~ git:(master) ✗ source .bash_profile</div></pre></td></tr></table></figure></p><p>至此，快捷指令设置完成</p><h2 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h2><p>然后cd进入本地博客根目录，执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">➜  ~ git:(master) ✗ hexo c</div><div class="line">➜  ~ git:(master) ✗ hexo d</div><div class="line">➜  ~ git:(master) ✗ hexo s</div><div class="line">INFO  Start processing</div><div class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure></p><p>看到如下信息就可以在本地访问<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 查看博客主页了</p><h2 id="远程部署"><a href="#远程部署" class="headerlink" title="远程部署"></a>远程部署</h2><p>部署到元辰github上需要修改一下本地博客配置文件，找到根目录的_config.yml文件，修改以下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:你的github名/你的github名.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p><p>然后就可以执行如下命令部署到github<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜  ~ git:(master) ✗ hexo d</div></pre></td></tr></table></figure></p><p>看到如下信息说明部署完成，就可以通过<a href="https://你的github名.github.io/" target="_blank" rel="external">https://你的github名.github.io/</a> 访问你的主页了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INFO  Deploy done: git</div></pre></td></tr></table></figure></p><h1 id="部署完成"><a href="#部署完成" class="headerlink" title="部署完成"></a>部署完成</h1><p>至此，一个博客模板搭建完成，hexo还支持丰富的插件，包括RSS订阅，评论系统的接入，文章阅读量，打赏功能，第三方链接，如微博，发邮件等。</p><p>接入以上功能，让自己的博客更加炫酷！可以联系博主，博客主页有邮箱，微博，文章底部有微信公众号等联系方式。</p><p>转载请注明出处，谢谢！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo - 快速、简洁且高效的博客框架&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://luojiamingl.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="博客搭建" scheme="http://luojiamingl.github.io/categories/%E7%BC%96%E7%A8%8B/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="hexo" scheme="http://luojiamingl.github.io/tags/hexo/"/>
    
      <category term="github" scheme="http://luojiamingl.github.io/tags/github/"/>
    
      <category term="博客" scheme="http://luojiamingl.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
